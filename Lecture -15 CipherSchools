
Data Manipulation And Analysis With Numpy

Automatically generated by Colab.

pip install numpy

import numpy as np

To create a 1D array from a list, you can use np.array([1, 2, 3, 4, 5]).
For a 2D array from a list of lists, like [[1, 2, 3], [4, 5, 6]], you can use np.array([[1, 2, 3], [4, 5, 6]]).
You can also create arrays filled with zeros or ones using np.zeros((3, 4)) or np.ones((2, 3)), respectively.
To generate an array with a range of values, try np.arange(10, 20, 2) (which gives you [10, 12, 14, 16, 18]).
And for random values, use np.random.rand(3, 3).
Element-Wise Operations:
NumPy allows you to perform element-wise operations easily. For example:
Adding 2 to each element: arr + 2
Multiplying by 2: arr * 2
Subtracting 1: arr - 1
Dividing by 2: arr / 2
You can also compute square roots, exponentials, logarithms, and trigonometric functions on arrays.
Indexing and Slicing:
To access specific elements or slices of an array:
Slicing: arr[1:4] gives you elements from index 1 to 3.
Ranges: arr[:3] includes elements up to index 2, and arr[2:] includes elements from index 2 onwards.
Boolean indexing: arr[arr > 3] selects elements greater than 3.
Fancy indexing: You can use a list of indices, like arr[[0, 2, 4]].
Reshaping and Transposing:
Reshaping arrays: Use arr.reshape((3, 2)) to change the shape of an array.
Transposing: arr.T swaps rows with columns.
Aggregation Functions:
Sum: np.sum(arr) gives the sum of all elements.
Along specific axes: np.sum(arr, axis=0) sums along columns, and np.sum(arr, axis=1) sums along rows.
Mean: np.mean(arr) computes the average of all elements.
Indices of minimum and maximum values: np.argmin(arr) and np.argmax(arr).
